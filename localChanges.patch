diff --git a/go.mod b/go.mod
index 473f13b..c3c1e5a 100644
--- a/go.mod
+++ b/go.mod
@@ -1,6 +1,6 @@
 module badgerops/ocpdownloader
 
-go 1.22.1
+go 1.20
 
 require (
 	github.com/sirupsen/logrus v1.9.3
diff --git a/main.go b/main.go
index ab47900..c1f14c3 100644
--- a/main.go
+++ b/main.go
@@ -57,8 +57,8 @@ func downloadHandler(config Section) {
 	for _, version := range config.Version {
 		logrus.Info("Processing files for version: ", version)
 		url := config.BaseURL + version
-		shaURL := url + "/sha256sum.txt"
-		err := downloadFile(shaURL, config.OutputDir, version, "sha256sum.txt")
+		//shaURL := url + "/sha256sum.txt"
+		err := downloadFile(url, config.OutputDir, version, "sha256sum.txt")
 		if err != nil {
 			logrus.Error("Failed to download file", err)
 		}
@@ -83,7 +83,7 @@ func downloadFileList(fileList []byte, url string, version string, outputDir str
 		// split the 'fileInfo' line - it will have 3 items, a sha256sum, a space and the filename
 		sha256sum := fileInfo[0]
 		filename := fileInfo[2]
-		fileURL := url + "/" + filename
+		//Fileurl := url + "/" + filename
 
 		// try to download each file 3 times with exponential backoff on error
 		const maxRetries = 3
@@ -95,16 +95,16 @@ func downloadFileList(fileList []byte, url string, version string, outputDir str
 				logrus.Debugf("File validated! %s matches %s", filename, sha256sum)
 				break
 			}
-			logrus.Warnf("Could not validate local file %s, error: %s", fileURL, err)
-			err = downloadFile(fileURL, outputDir, version, filename)
+			logrus.Warnf("Could not validate local file %s, error: %s", url, err)
+			err = downloadFile(url, outputDir, version, filename)
 			if err != nil {
-				logrus.Warnf("Failed to download %s, error: %s", fileURL, err)
+				logrus.Warnf("Failed to download %s, error: %s", url, err)
 				time.Sleep(initialBackoff * (1 << uint(i)))
 				continue
 			}
 			err = validateFile(version, filename, sha256sum, outputDir)
 			if err != nil {
-				logrus.Error("Failed to download file: ", fileURL)
+				logrus.Error("Failed to download file: ", url)
 				continue
 			}
 		}
@@ -146,19 +146,21 @@ func containsAny(line string, ignoredFiles []string) bool {
 }
 
 func downloadFile(url string, outputDir string, filepath string, filename string) error {
-	logrus.Debugln("Downloading: ", url)
-	resp, err := http.Get(url)
+	logrus.Debugf("Downloading file %s to path %s/%s from url %s ", filename, outputDir, filepath, url)
+        fetchUrl := url + "/" + filename
+	resp, err := http.Get(fetchUrl)
 	if err != nil {
 		return err
 	}
 	defer resp.Body.Close()
 
-	fullPath := outputDir + filepath
+	fullPath := outputDir + "/" + filepath
 
 	os.MkdirAll(fullPath, 0755)
 
 	out, err := os.Create(fullPath + "/" + filename)
 	if err != nil {
+                logrus.Error("Could not create filepath ", fullPath)
 		return err
 	}
 	defer out.Close()
@@ -168,8 +170,8 @@ func downloadFile(url string, outputDir string, filepath string, filename string
 }
 
 func validateFile(filepath, filename string, sha256sum string, outputDir string) error {
-	fullPath := outputDir + filepath
-	logrus.Tracef("Validating file %s at path %s", filename, fullPath)
+	fullPath := outputDir + "/" + filepath
+	logrus.Debugf("Validating file %s at path %s", filename, fullPath)
 	fileData, err := ioutil.ReadFile(fullPath + "/" + filename)
 	if err != nil {
 		return err
